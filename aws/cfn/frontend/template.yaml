AWSTemplateFormatVersion: 2010-09-09
Description: |
  - CloudFront Distribution
  - S3 Bucket for www.
  - S3 Bucket for naked domain
  - Bucket Policy (CloudFront OAI)

Parameters:
  CertificateArn:
    Type: String
  WwwBucketName:
    Type: String
  RootBucketName:
    Type: String

Resources:
  # [ADDED] CloudFront Origin Access Identity so CloudFront can privately read from S3
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for CloudFront to reach S3

  WWWBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WwwBucketName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref RootBucketName

  RootBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RootBucketName
      # [CHANGED] Make bucket fully private; CloudFront OAI will access via bucket policy
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true        # [ADDED]
        BlockPublicPolicy: true      # [CHANGED] was false
        IgnorePublicAcls: true       # [ADDED]
        RestrictPublicBuckets: true  # [ADDED]
      # (Optional) You can keep or remove WebsiteConfiguration; CloudFront uses S3 (not website) endpoint.
      # Keeping this is harmless, but CloudFront won't use it.
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # [CHANGED] Bucket policy now grants read access ONLY to the OAI (no public '*')
  RootBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RootBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId  # [CHANGED]
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${RootBucket}/*'

  # Route 53 aliases to CloudFront
  RootBucketDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${RootBucketName}.
      Name: !Sub ${RootBucketName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront zone id (global)

  WwwBucketDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${RootBucketName}.
      Name: !Sub ${WwwBucketName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront zone id (global)

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref RootBucketName               # [CHANGED] keep these dynamic, avoids hardcoding
          - !Ref WwwBucketName                # [CHANGED]
        Comment: Frontend React Js for Cruddur
        Enabled: true
        HttpVersion: http2and3
        DefaultRootObject: index.html
        Origins:
          - Id: RootBucketOrigin
            # [CHANGED] Use the S3 bucket's RegionalDomainName (not Website endpoint)
            DomainName: !GetAtt RootBucket.RegionalDomainName
            S3OriginConfig:
              # [CHANGED] Attach the OAI
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultCacheBehavior:
          TargetOriginId: RootBucketOrigin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        # [ADDED] SPA-friendly error handling so client routes work
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
