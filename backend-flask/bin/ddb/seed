#!/usr/bin/env python3

import boto3
import os
import sys
import uuid
from datetime import datetime, timedelta, timezone

# Add parent path to import local db module
current_path = os.path.dirname(os.path.abspath(__file__))  # path to bin/ddb
parent_path = os.path.abspath(os.path.join(current_path, '..', '..'))
sys.path.append(parent_path)
from lib.db import db

# -----------------------------
# Configure DynamoDB Client
# -----------------------------
attrs = {'endpoint_url': 'http://localhost:8000'}
if len(sys.argv) == 2 and 'prod' in sys.argv[1]:
    attrs = {}
ddb = boto3.client('dynamodb', **attrs)

# -----------------------------
# Get user UUIDs from PostgreSQL
# -----------------------------
def get_user_uuids():
    sql = """
    SELECT 
        users.uuid,
        users.display_name,
        users.handle
    FROM users
    WHERE users.handle IN (%(my_handle)s, %(other_handle)s)
    """
    users = db.query_array_json(sql, {
        'my_handle': 'muqeet',
        'other_handle': 'muneer009'
    })
    return {
        'my_user': next((u for u in users if u["handle"] == 'muqeet'), None),
        'other_user': next((u for u in users if u["handle"] == 'muneer009'), None)
    }

# -----------------------------
# Create user-group metadata
# -----------------------------
def create_message_group(client, message_group_uuid, my_user_uuid, last_message_at,
                         message, other_user_uuid, other_user_display_name, other_user_handle):
    
    print("🔍 Debug put_item values:")
    print({
        'pk': f"GRP#{my_user_uuid}",
        'sk': last_message_at,
        'message_group_uuid': message_group_uuid,
        'message': message,
        'user_uuid': other_user_uuid,
        'user_display_name': other_user_display_name,
        'user_handle': other_user_handle
    })

    client.put_item(
        TableName='cruddur-messages',
        Item={
            'pk': {'S': f"GRP#{my_user_uuid}"},
            'sk': {'S': last_message_at},
            'message_group_uuid': {'S': message_group_uuid},
            'message': {'S': message},
            'user_uuid': {'S': other_user_uuid},
            'user_display_name': {'S': other_user_display_name},
            'user_handle': {'S': other_user_handle}
        }
    )

# -----------------------------
# Create a chat message item
# -----------------------------
def create_message(client, message_group_uuid, created_at,
                   message, my_user_uuid, my_user_display_name, my_user_handle):

    print("🔍 Creating message:", message)
    
    client.put_item(
        TableName='cruddur-messages',
        Item={
            'pk': {'S': f"MSG#{message_group_uuid}"},
            'sk': {'S': created_at},
            'message_group_uuid': {'S': message_group_uuid},
            'message': {'S': message},
            'user_uuid': {'S': my_user_uuid},
            'user_display_name': {'S': my_user_display_name},
            'user_handle': {'S': my_user_handle}
        }
    )

# -----------------------------
# Seed Example Conversation
# -----------------------------
def seed_conversation(convo_text, users, message_group_uuid, start_time):
    lines = convo_text.strip().split('\n')
    for i, line in enumerate(lines):
        if line.startswith('Person 1: '):
            key = 'my_user'
            message = line.replace('Person 1: ', '')
        elif line.startswith('Person 2: '):
            key = 'other_user'
            message = line.replace('Person 2: ', '')
        else:
            raise ValueError(f"Invalid line format: {line}")
        
        created_at = (start_time + timedelta(minutes=i)).isoformat()
        create_message(
            client=ddb,
            message_group_uuid=message_group_uuid,
            created_at=created_at,
            message=message,
            my_user_uuid=users[key]['uuid'],
            my_user_display_name=users[key]['display_name'],
            my_user_handle=users[key]['handle']
        )

# -----------------------------
# Main Execution
# -----------------------------
if __name__ == "__main__":
    now = datetime.now(timezone.utc).astimezone()
    message_group_uuid = str(uuid.uuid4())
    users = get_user_uuids()

    # ✅ Validate users
    if not users['my_user'] or not users['other_user']:
        print("❌ One or both users not found in PostgreSQL. Aborting seed.")
        print("Fetched users:", users)
        sys.exit(1)

    # ✅ Create message_group entries for both users
    for u, other in [('my_user', 'other_user'), ('other_user', 'my_user')]:
        print(f"➡️  Creating message group for {users[u]['handle']} with {users[other]['handle']}")
        create_message_group(
            client=ddb,
            message_group_uuid=message_group_uuid,
            my_user_uuid=users[u]['uuid'],
            other_user_uuid=users[other]['uuid'],
            other_user_handle=users[other]['handle'],
            other_user_display_name=users[other]['display_name'],
            last_message_at=now.isoformat(),
            message="this is a filler message"
        )

    # ✅ Load conversation text from same folder as this script
    conversation_path = os.path.join(current_path, 'conversation.txt')
    with open(conversation_path, 'r') as f:
        convo_text = f.read()

    # ✅ Seed messages
    seed_conversation(convo_text, users, message_group_uuid, now)
    print("✅ Messages seeded successfully.")
